*What happens User updates task in admin Tasks section of the Create Bid Page:

1. typing a letter in the Task Name Box

============================================================
========================OnTextChanged======================= SearchableEntryView.xaml.cs ---> Line 80
============================================================

private void OnTextChanged(object sender, TextChangedEventArgs e)
    {
        SearchText = e.NewTextValue; -----// sets search text to what is in the box with each change
        ApplyFilter(); ------> // calls apply filter
    }

============================================================
====================ApplyFilter==================== SearchableEntryView.cs ---> Line 85
============================================================

 private void ApplyFilter()
    {
        var query = SearchText?.ToLowerInvariant();

        // 🛑 If no query, hide suggestions and bail out
        if (string.IsNullOrWhiteSpace(query))
        {
            FilteredSuggestions.Clear();
            SuggestionsView.IsVisible = false;
            return;
        }
        var items = new List<object>();

        foreach (var item in Suggestions ?? Enumerable.Empty<object>())
        {
            string value = item.ToString();  -------> to taskDto "ToString method"

            if (!string.IsNullOrWhiteSpace(DisplayMemberPath))
            {
                var prop = item.GetType().GetProperty(DisplayMemberPath);
                value = prop?.GetValue(item)?.ToString() ?? "";
            }

            if (!string.IsNullOrWhiteSpace(value) && value.ToLowerInvariant().Contains(query))
            {
                items.Add(item);
            }
        }

        FilteredSuggestions.Clear();
        foreach (var item in items)
            FilteredSuggestions.Add(item);

        SuggestionsView.IsVisible = FilteredSuggestions.Any();
    }

============================================================
====================TaskDto ToString()==================== TaskDto.cs ---> Line 13
============================================================

public override string ToString()
        {
            return TaskName;
        }

============================================================
====================ApplyFilter==================== SearchableEntryView.cs ---> Line 85
============================================================

 private void ApplyFilter()
    {
        var query = SearchText?.ToLowerInvariant();

        // 🛑 If no query, hide suggestions and bail out
        if (string.IsNullOrWhiteSpace(query))
        {
            FilteredSuggestions.Clear();
            SuggestionsView.IsVisible = false;
            return;
        }
        var items = new List<object>();

        foreach (var item in Suggestions ?? Enumerable.Empty<object>())
        {
            string value = item.ToString();  <------- returns here

            if (!string.IsNullOrWhiteSpace(DisplayMemberPath))
            {
                var prop = item.GetType().GetProperty(DisplayMemberPath);
                value = prop?.GetValue(item)?.ToString() ?? "";
            }

            if (!string.IsNullOrWhiteSpace(value) && value.ToLowerInvariant().Contains(query))
            {
                items.Add(item);
            }
        }

        FilteredSuggestions.Clear();
        foreach (var item in items)
            FilteredSuggestions.Add(item);

        SuggestionsView.IsVisible = FilteredSuggestions.Any();
    }

============================================================
========================OnTextChanged======================= SearchableEntryView.xaml.cs ---> Line 80
============================================================

private void OnTextChanged(object sender, TextChangedEventArgs e)
    {
        SearchText = e.NewTextValue; -----// sets search text to what is in the box with each change
        ApplyFilter(); <------ Returns here
    }

============================================================
=====================New Letter is added==================== 
============================================================

***********************************************************************************************************
***********************************************************************************************************
***********************************************************************************************************

2. Selecting a task from the suggestions window

============================================================
==================OnSuggestionsSelected===================== SearchableEntryView.xaml.cs ---> Line 86
============================================================

private void OnSuggestionSelected(object sender, SelectionChangedEventArgs e)
    {
        if (e.CurrentSelection.FirstOrDefault() is object selected)
        {
            SelectedItem = selected; -----> on text changed with search text being selected task name

            // Use DisplayMemberPath if provided
            if (!string.IsNullOrWhiteSpace(DisplayMemberPath))
            {
                var prop = selected.GetType().GetProperty(DisplayMemberPath);
                SearchText = prop?.GetValue(selected)?.ToString() ?? "";
            }
            else
            {
                SearchText = selected.ToString();
            }

            SuggestionsView.IsVisible = false;
        }
    }

===========================================================
========================OnTextChanged======================= SearchableEntryView.xaml.cs ---> Line 80
============================================================

private void OnTextChanged(object sender, TextChangedEventArgs e)
    {
        SearchText = e.NewTextValue; -----// sets search text to what is in the box with each change
        ApplyFilter(); ------> // calls apply filter
    }

============================================================
====================ApplyFilter==================== SearchableEntryView.cs ---> Line 85
============================================================

 private void ApplyFilter()
    {
        var query = SearchText?.ToLowerInvariant();

        // 🛑 If no query, hide suggestions and bail out
        if (string.IsNullOrWhiteSpace(query))
        {
            FilteredSuggestions.Clear();
            SuggestionsView.IsVisible = false;
            return;
        }
        var items = new List<object>();

        foreach (var item in Suggestions ?? Enumerable.Empty<object>())
        {
            string value = item.ToString();  -------> to taskDto "ToString method"

            if (!string.IsNullOrWhiteSpace(DisplayMemberPath))
            {
                var prop = item.GetType().GetProperty(DisplayMemberPath);
                value = prop?.GetValue(item)?.ToString() ?? "";
            }

            if (!string.IsNullOrWhiteSpace(value) && value.ToLowerInvariant().Contains(query))
            {
                items.Add(item);
            }
        }

        FilteredSuggestions.Clear();
        foreach (var item in items)
            FilteredSuggestions.Add(item);

        SuggestionsView.IsVisible = FilteredSuggestions.Any();
    }

============================================================
====================TaskDto ToString()==================== TaskDto.cs ---> Line 13
============================================================

public override string ToString()
        {
            return TaskName;
        }

============================================================
====================ApplyFilter==================== SearchableEntryView.cs ---> Line 85
============================================================

 private void ApplyFilter()
    {
        var query = SearchText?.ToLowerInvariant();

        // 🛑 If no query, hide suggestions and bail out
        if (string.IsNullOrWhiteSpace(query))
        {
            FilteredSuggestions.Clear();
            SuggestionsView.IsVisible = false;
            return;
        }
        var items = new List<object>();

        foreach (var item in Suggestions ?? Enumerable.Empty<object>())
        {
            string value = item.ToString();  <------- returns here

            if (!string.IsNullOrWhiteSpace(DisplayMemberPath))
            {
                var prop = item.GetType().GetProperty(DisplayMemberPath);
                value = prop?.GetValue(item)?.ToString() ?? "";
            }

            if (!string.IsNullOrWhiteSpace(value) && value.ToLowerInvariant().Contains(query))
            {
                items.Add(item);
            }
        }

        FilteredSuggestions.Clear();
        foreach (var item in items)
            FilteredSuggestions.Add(item);

        SuggestionsView.IsVisible = FilteredSuggestions.Any();
    }

===========================================================
========================OnTextChanged======================= SearchableEntryView.xaml.cs ---> Line 80
============================================================

private void OnTextChanged(object sender, TextChangedEventArgs e)
    {
        SearchText = e.NewTextValue; -----// sets search text to what is in the box with each change
        ApplyFilter(); <------ // returns here
    }

============================================================
==================OnSuggestionsSelected===================== SearchableEntryView.xaml.cs ---> Line 86
============================================================

private void OnSuggestionSelected(object sender, SelectionChangedEventArgs e)
    {
        if (e.CurrentSelection.FirstOrDefault() is object selected)
        {
            SelectedItem = selected; -----> on text changed with search text being selected task name

            // Use DisplayMemberPath if provided
            if (!string.IsNullOrWhiteSpace(DisplayMemberPath))
            {
                var prop = selected.GetType().GetProperty(DisplayMemberPath); ------> to BidTaskViewModel.cs
                SearchText = prop?.GetValue(selected)?.ToString() ?? "";
            }
            else
            {
                SearchText = selected.ToString();
            }

            SuggestionsView.IsVisible = false;
        }
    }

============================================================
==================OnSelectedTemplateTaskNameChanged===================== BidTaskViewModel.cs ---> Line 31
============================================================

 partial void OnSelectedTemplateTaskNameChanged(TaskDto value)
        {
            Debug.WriteLine($"🔥 Template selected: {value?.TaskName}");
            if (value == null) return;

            // Set the task name and prices based on the template
            Name = value.TaskName;
            Cost = value.DefaultCost;
            Sale = value.DefaultSale;
            TaskModelId = value.Id;

            OnPropertyChanged(nameof(Name)); ------> add task
            OnPropertyChanged(nameof(Cost));
            OnPropertyChanged(nameof(Sale));

        }

********************************this process for name cos and sale*****************************************

============================================================
==================Add Task===================== CreateBidViewModel.cs ---> Line 233
============================================================

{
        var task = new BidTaskViewModel();
        task.PropertyChanged += (_, __) => raise();
        tasks.Add(task);
        raise();
    }


============================================================
===================RaiseAdminTotalsChanged================== CreateBidViewModel.cs ---> Line 212
============================================================

private void RaiseAdminTotalsChanged()
    {
        OnPropertyChanged(nameof(AdminCostTotal));
        OnPropertyChanged(nameof(AdminSaleTotal));
        OnPropertyChanged(nameof(AdminEngCostTotal));
        OnPropertyChanged(nameof(AdminEngSaleTotal));
    }

============================================================
==================Add Task===================== CreateBidViewModel.cs ---> Line 233
============================================================

{
        var task = new BidTaskViewModel();
        task.PropertyChanged += (_, __) => raise();
        tasks.Add(task);
        raise();
    }


============================================================
=====================hooktaskhandlers==================== CreateBidViewModel.cs ---> Line 198
============================================================

private void HookTaskHandlers(System.Collections.Specialized.NotifyCollectionChangedEventArgs e, Action raiseTotals)
    {
        if (e.NewItems != null)
        {
            foreach (BidTaskViewModel item in e.NewItems)
                item.PropertyChanged += (_, __) => raiseTotals();
        }
        raiseTotals();   -----> to next step
    }

============================================================
===================RaiseAdminTotalsChanged================== CreateBidViewModel.cs ---> Line 212
============================================================

private void RaiseAdminTotalsChanged()
    {
        OnPropertyChanged(nameof(AdminCostTotal));
        OnPropertyChanged(nameof(AdminSaleTotal));
        OnPropertyChanged(nameof(AdminEngCostTotal));
        OnPropertyChanged(nameof(AdminEngSaleTotal));
    }

============================================================
=====================hooktaskhandlers==================== CreateBidViewModel.cs ---> Line 198
============================================================

private void HookTaskHandlers(System.Collections.Specialized.NotifyCollectionChangedEventArgs e, Action raiseTotals)
    {
        if (e.NewItems != null)
        {
            foreach (BidTaskViewModel item in e.NewItems)
                item.PropertyChanged += (_, __) => raiseTotals();
        }
        raiseTotals();   <-----returned here
    }

************************************************************************************************************

============================================================ ----->derives from selectedTemplateTaskName in BidtaskViewmodel based on TaskName of TaskDto
==================OnSelectedTemplateTaskNameChanged===================== BidTaskViewModel.cs ---> Line 31
============================================================

 partial void OnSelectedTemplateTaskNameChanged(TaskDto value)
        {
            Debug.WriteLine($"🔥 Template selected: {value?.TaskName}");
            if (value == null) return;

            // Set the task name and prices based on the template
            Name = value.TaskName;
            Cost = value.DefaultCost;
            Sale = value.DefaultSale;
            TaskModelId = value.Id;

            OnPropertyChanged(nameof(Name)); ------> add task
            OnPropertyChanged(nameof(Cost));
            OnPropertyChanged(nameof(Sale));

        }


*********************************************************************************************************************************

BindingContext.

// ReSharper disable InconsistentNaming
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using FyreWorksPM.DataAccess.Data.Models;
using FyreWorksPM.DataAccess.DTO;
using FyreWorksPM.DataAccess.Enums;
using FyreWorksPM.DataAccess.Models;
using FyreWorksPM.Pages.Creation;
using FyreWorksPM.Services.Bid;
using FyreWorksPM.Services.Client;
using FyreWorksPM.Services.Item;
using FyreWorksPM.Services.Navigation;
using FyreWorksPM.Services.Tasks;
using Microsoft.Maui.ApplicationModel;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;

namespace FyreWorksPM.ViewModels.Creation;

/// <summary>
/// ViewModel for creating and managing bids, tasks, and site info.
/// </summary>
public partial class CreateBidViewModel : ObservableObject
{
    #region Services

    private readonly IClientService _clientService;
    private readonly IItemService _itemService;
    private readonly IItemTypeService _itemTypeService;
    private readonly IBidService _bidService;
    private readonly ITaskService _taskService;
    private readonly INavigationServices _navigationService;

    #endregion

    #region Constructor

    public CreateBidViewModel(
        IBidService bidService,
        IClientService clientService,
        IItemService itemService,
        IItemTypeService itemTypeService,
        ITaskService taskService,
        INavigationServices navigationService)
    {
        _bidService = bidService;
        _clientService = clientService;
        _itemService = itemService;
        _itemTypeService = itemTypeService;
        _taskService = taskService;
        _navigationService = navigationService;

        CreatedDate = DateTime.Today;
        NavigateToCreateTasksCommand = new AsyncRelayCommand(NavigateToCreateTasksAsync);

        AdminTasks.CollectionChanged += (s, e) => HookTaskHandlers(e, RaiseAdminTotalsChanged);
        EngineeringTasks.CollectionChanged += (s, e) => HookTaskHandlers(e, RaiseEngineeringTotalsChanged);

        Task.Run(async () => await InitializeAsync());
    }

    #endregion

    #region Observable Properties

    [ObservableProperty] private bool isActive = true;
    [ObservableProperty] private string bidNumber = string.Empty;
    [ObservableProperty] private string scopeOfWork = string.Empty;
    [ObservableProperty] private string addressLine1 = string.Empty;
    [ObservableProperty] private string addressLine2 = string.Empty;
    [ObservableProperty] private string city = string.Empty;
    [ObservableProperty] private string state = string.Empty;
    [ObservableProperty] private string zipCode = string.Empty;
    [ObservableProperty] private string parcelNumber = string.Empty;
    [ObservableProperty] private string jurisdiction = string.Empty;
    [ObservableProperty] private double buildingArea;
    [ObservableProperty] private int numberOfStories;
    [ObservableProperty] private string occupancyGroup = string.Empty;
    [ObservableProperty] private int occupantLoad;
    [ObservableProperty] private string constructionType = string.Empty;
    [ObservableProperty] private bool isSprinklered;

    [ObservableProperty] private string jobName = string.Empty;
    [ObservableProperty] private DateTime createdDate;
    [ObservableProperty] private string projectName = string.Empty;
    [ObservableProperty] private decimal materialMarkup;
    [ObservableProperty] private decimal laborSubtotal;
    [ObservableProperty] private decimal laborMarkup;
    [ObservableProperty] private ClientDto? selectedClient;

    [ObservableProperty] private ObservableCollection<TaskDto> taskTemplates;
    [ObservableProperty] private TaskDto selectedTemplateTask;
    [ObservableProperty] private BidTaskModel currentTask;
    [ObservableProperty] private BidComponentLineItemViewModel? selectedComponentItem;
    [ObservableProperty] private ObservableCollection<TaskDto> allAdminTaskNames = new();
    [ObservableProperty] private ObservableCollection<TaskDto> allEngineeringTaskNames = new();

    #endregion

    #region Collections

    public ObservableCollection<BidTaskViewModel> Tasks { get; set; } = new();
    public ObservableCollection<ClientDto> Clients { get; } = new();
    public ObservableCollection<ItemDto> AvailableItems { get; } = new();
    public ObservableCollection<BidLineItemModel> LineItems { get; } = new();
    public ObservableCollection<BidTaskViewModel> AdminTasks { get; } = new();
    public ObservableCollection<BidTaskViewModel> EngineeringTasks { get; } = new();
    public ObservableCollection<BidComponentLineItemViewModel> ComponentLineItems { get; } = new();

    #endregion

    #region Static Option Lists

    public ObservableCollection<string> YesNoOptions { get; } = new() { "Yes", "No" };
    public List<string> InstallTypeOptions { get; } = new() { "Normal", "Lift", "Panel", "Pipe" };
    public List<string> InstallLocationOptions { get; } = new() { "warehouse", "hardlid", "tbar", "underground", "panel room" };

    #endregion

    #region Derived Properties

    public string SelectedSprinklerOption
    {
        get => IsSprinklered ? "Yes" : "No";
        set => IsSprinklered = value == "Yes";
    }

    public decimal MaterialSubtotal => LineItems.Sum(i => i.TotalCost);
    public decimal GrandTotal => MaterialSubtotal * (1 + (MaterialMarkup / 100)) + LaborSubtotal * (1 + (LaborMarkup / 100));

    public decimal AdminCostTotal => AdminTasks.Sum(t => t.Cost);
    public decimal AdminSaleTotal => AdminTasks.Sum(t => t.Sale);
    public decimal EngineeringCostTotal => EngineeringTasks.Sum(t => t.Cost);
    public decimal EngineeringSaleTotal => EngineeringTasks.Sum(t => t.Sale);
    public decimal AdminEngCostTotal => AdminCostTotal + EngineeringCostTotal;
    public decimal AdminEngSaleTotal => AdminSaleTotal + EngineeringSaleTotal;

    public BidLaborConfig LaborOverrides { get; set; } = new();

    #endregion

    #region Commands

    public IAsyncRelayCommand NavigateToCreateTasksCommand { get; }

    [RelayCommand] private async Task OpenTaskManagerAsync() => await _navigationService.PushPageAsync<CreateTasksPage>();
    [RelayCommand] private void AddAdminTask() => AddTask(AdminTasks, RaiseAdminTotalsChanged);
    [RelayCommand] private void RemoveAdminTask(BidTaskViewModel task) => RemoveTask(AdminTasks, task, RaiseAdminTotalsChanged);
    [RelayCommand] private void AddEngineeringTask() => AddTask(EngineeringTasks, RaiseEngineeringTotalsChanged);
    [RelayCommand] private void RemoveEngineeringTask(BidTaskViewModel task) => RemoveTask(EngineeringTasks, task, RaiseEngineeringTotalsChanged);
    [RelayCommand] private void SaveTasks() => SaveValidTasks();
    [RelayCommand] public async Task CreateNewItemAsync() => await CreateNewItem();
    [RelayCommand] private void RemoveComponentItem() { if (SelectedComponentItem != null) ComponentLineItems.Remove(SelectedComponentItem); }
    [RelayCommand] public async Task OpenItemLibraryAsync() => await OpenLibrary();
    [RelayCommand] private void AddComponentItem() => AddNewComponent();
    [RelayCommand] public async Task AddNewClientAsync() => await AddClient();
    [RelayCommand] public async Task SaveBidAsync() => await SaveBid();

    #endregion
    #region Initialization

    public async Task OnAppearingAsync() => await InitializeAsync();

    private async Task InitializeAsync()
    {
        await ResetFormAsync();
        BidNumber = await _bidService.GetNextBidNumberAsync();
        await Task.WhenAll(LoadClientsAsync(), LoadItemsAsync(), LoadTaskTemplatesAsync());
    }

    public Task ResetFormAsync()
    {
        ProjectName = string.Empty;
        SelectedClient = null;
        CreatedDate = DateTime.Today;
        IsActive = true;
        ScopeOfWork = string.Empty;
        AddressLine1 = string.Empty;
        AddressLine2 = string.Empty;
        City = string.Empty;
        State = string.Empty;
        ZipCode = string.Empty;
        ParcelNumber = string.Empty;
        Jurisdiction = string.Empty;
        BuildingArea = 0;
        NumberOfStories = 0;
        OccupancyGroup = string.Empty;
        OccupantLoad = 0;
        ConstructionType = string.Empty;
        IsSprinklered = false;
        return Task.CompletedTask;
    }

    #endregion

    #region Task Templates

    public async Task LoadTaskTemplatesAsync()
    {
        var admin = await _taskService.GetTemplatesByTypeAsync(TaskType.Admin);
        AllAdminTaskNames = new ObservableCollection<TaskDto>(admin);

        var eng = await _taskService.GetTemplatesByTypeAsync(TaskType.Engineering);
        AllEngineeringTaskNames = new ObservableCollection<TaskDto>(eng);
    }

    #endregion

    #region Task Management

    private void HookTaskHandlers(System.Collections.Specialized.NotifyCollectionChangedEventArgs e, Action raiseTotals)
    {
        if (e.NewItems != null)
        {
            foreach (BidTaskViewModel item in e.NewItems)
                item.PropertyChanged += (_, __) => raiseTotals();
        }
        raiseTotals();
    }

    private void RaiseAdminTotalsChanged()
    {
        OnPropertyChanged(nameof(AdminCostTotal));
        OnPropertyChanged(nameof(AdminSaleTotal));
        OnPropertyChanged(nameof(AdminEngCostTotal));
        OnPropertyChanged(nameof(AdminEngSaleTotal));
    }

    private void RaiseEngineeringTotalsChanged()
    {
        OnPropertyChanged(nameof(EngineeringCostTotal));
        OnPropertyChanged(nameof(EngineeringSaleTotal));
        OnPropertyChanged(nameof(AdminEngCostTotal));
        OnPropertyChanged(nameof(AdminEngSaleTotal));
    }

    private void AddTask(ObservableCollection<BidTaskViewModel> tasks, Action raise)
    {
        var task = new BidTaskViewModel();
        task.PropertyChanged += (_, __) => raise();
        tasks.Add(task);
        raise();
    }

    private void RemoveTask(ObservableCollection<BidTaskViewModel> tasks, BidTaskViewModel task, Action raise)
    {
        if (tasks.Contains(task))
        {
            task.PropertyChanged -= (_, __) => raise();
            tasks.Remove(task);
            raise();
        }
    }

    private void SaveValidTasks()
    {
        var validTasks = Tasks
            .Where(t => !string.IsNullOrWhiteSpace(t.Name) && t.Cost >= 0 && t.Sale >= 0)
            .ToList();

        if (validTasks.Count == 0)
        {
            Debug.WriteLine("[SAVE TASKS] No valid tasks to save.");
            return;
        }

        Debug.WriteLine($"[SAVE TASKS] Preparing {validTasks.Count} tasks for save...");

        foreach (var task in validTasks)
            Debug.WriteLine($"    • {task.Name}, Cost: {task.Cost}, Sale: {task.Sale}, Type: {task.Type}");

        Tasks.Clear();
        foreach (var task in validTasks)
            Tasks.Add(task);
    }

    #endregion

    #region Item Management

    public ItemDto SelectedItemFromLibrary
    {
        get => _selectedItemFromLibrary;
        set
        {
            _selectedItemFromLibrary = value;
            if (value != null)
            {
                LineItems.Add(new BidLineItemModel
                {
                    ItemName = value.Name,
                    UnitCost = 0,
                    Quantity = 1,
                    MarkupPercent = 0
                });

                _selectedItemFromLibrary = null;
                OnPropertyChanged(nameof(LineItems));
                OnPropertyChanged(nameof(MaterialSubtotal));
                OnPropertyChanged(nameof(GrandTotal));
            }
        }
    }

    private ItemDto _selectedItemFromLibrary;

    private async Task CreateNewItem()
    {
        var vm = new CreateItemsViewModel(_itemService, _itemTypeService, _navigationService);
        await Shell.Current.Navigation.PushModalAsync(new CreateItemsPage(vm, item =>
        {
            SelectedItemFromLibrary = item;
            _ = LoadItemsAsync();
        }));
    }

    private async Task OpenLibrary()
    {
        var vm = new CreateItemsViewModel(_itemService, _itemTypeService, _navigationService);
        await Shell.Current.Navigation.PushAsync(new CreateItemsPage(vm, item => SelectedItemFromLibrary = item));
    }

    private void AddNewComponent()
    {
        var newModel = new BidComponentLineItemModel
        {
            ItemName = "New Component",
            Description = "Describe me!",
            Type = "Panel Device",
            Qty = 1,
            UnitCost = 0,
            UnitSale = 0,
            Piped = false,
            InstallType = "Normal",
            InstallLocation = "warehouse"
        };

        var vm = new BidComponentLineItemViewModel(newModel, LaborOverrides)
        {
            InstallTypeOptions = InstallTypeOptions,
            InstallLocationOptions = InstallLocationOptions,
            AvailableItems = AvailableItems
        };
        ComponentLineItems.Add(vm);
    }

    private async Task LoadItemsAsync()
    {
        var items = await _itemService.GetAllItemsAsync();
        MainThread.BeginInvokeOnMainThread(() =>
        {
            AvailableItems.Clear();
            foreach (var item in items)
                AvailableItems.Add(item);
        });
        Debug.WriteLine($"Loaded {items.Count} items from API");
        foreach (var i in items)
            Debug.WriteLine($" → {i.Name}");
    }

    #endregion

    #region Client Management

    public Func<Task>? RequestAddNewClient { get; set; }

    private async Task AddClient()
    {
        if (RequestAddNewClient != null)
            await RequestAddNewClient.Invoke();
        await LoadClientsAsync();
    }

    public async Task OnClientAddedAsync(ClientDto newClient)
    {
        await LoadClientsAsync();
        MainThread.BeginInvokeOnMainThread(() =>
        {
            var matchingClient = Clients.FirstOrDefault(c => c.Id == newClient.Id);
            if (matchingClient != null)
            {
                SelectedClient = matchingClient;
                OnPropertyChanged(nameof(SelectedClient));
            }
        });
    }

    public async Task LoadClientsAsync()
    {
        var clients = await _clientService.GetAllClientsAsync();
        MainThread.BeginInvokeOnMainThread(() =>
        {
            Clients.Clear();
            foreach (var client in clients)
                Clients.Add(client);
        });
    }

    #endregion

    #region Bid Saving

    private async Task NavigateToCreateTasksAsync()
    {
        await _navigationService.GoToAsync(nameof(CreateTasksPage));
    }

    private async Task SaveBid()
    {
        SaveValidTasks();
        if (string.IsNullOrWhiteSpace(BidNumber) || string.IsNullOrWhiteSpace(ProjectName) || SelectedClient == null)
        {
            await Shell.Current.DisplayAlert("Missing Info", "Please fill in all required fields.", "OK");
            return;
        }

        var newBid = new CreateBidDto
        {
            BidNumber = BidNumber,
            ProjectName = ProjectName,
            ClientId = SelectedClient.Id,
            CreatedDate = CreatedDate,
            IsActive = IsActive,
            SiteInfo = new SiteInfoDto
            {
                ScopeOfWork = ScopeOfWork,
                AddressLine1 = AddressLine1,
                AddressLine2 = AddressLine2,
                City = City,
                State = State,
                ZipCode = ZipCode,
                ParcelNumber = ParcelNumber,
                Jurisdiction = Jurisdiction,
                BuildingArea = BuildingArea,
                NumberOfStories = NumberOfStories,
                OccupancyGroup = OccupancyGroup,
                OccupantLoad = OccupantLoad,
                ConstructionType = ConstructionType,
                IsSprinklered = IsSprinklered
            },
            Tasks = AdminTasks.Concat(EngineeringTasks).Select(t => new CreateBidTaskDto
            {
                TaskModelId = t.TaskModelId,
                TaskName = t.Name,
                Cost = t.Cost,
                Sale = t.Sale
            }).ToList()
        };

        try
        {
            await _bidService.CreateBidAsync(newBid);
            await Shell.Current.DisplayAlert("Success", "Bid saved successfully.", "OK");
            await Shell.Current.Navigation.PopAsync();
        }
        catch (Exception ex)
        {
            await Shell.Current.DisplayAlert("Error", $"Could not save bid: {ex.Message}", "OK");
        }
    }

    #endregion
}






Task********************************************************************






private void OnTextChanged(object sender, TextChangedEventArgs e)
    {
        SearchText = e.NewTextValue;
        ApplyFilter();
    }

    private void OnSuggestionSelected(object sender, SelectionChangedEventArgs e)
    {
        if (e.CurrentSelection.FirstOrDefault() is object selected)
        {
            SelectedItem = selected;

            // Use DisplayMemberPath if provided
            if (!string.IsNullOrWhiteSpace(DisplayMemberPath))
            {
                var prop = selected.GetType().GetProperty(DisplayMemberPath);
                SearchText = prop?.GetValue(selected)?.ToString() ?? "";
            }
            else
            {
                SearchText = selected.ToString();
            }

            SuggestionsView.IsVisible = false;
        }
    }

    private void ApplyFilter()
    {
        var query = SearchText?.ToLowerInvariant(); ---->SearchText=p

        // 🛑 If no query, hide suggestions and bail out
        if (string.IsNullOrWhiteSpace(query)) ----> query = p
        {                                         ------
            FilteredSuggestions.Clear();          ------>skips
            SuggestionsView.IsVisible = false;    ------
            return;                               ------
        }
        var items = new List<object>(); ---->count = 0

        foreach (var item in Suggestions ?? Enumerable.Empty<object>()) ---->suggesyions count =1
        {
            string value = item.ToString();

            if (!string.IsNullOrWhiteSpace(DisplayMemberPath))
            {
                var prop = item.GetType().GetProperty(DisplayMemberPath);
                value = prop?.GetValue(item)?.ToString() ?? "";
            }

            if (!string.IsNullOrWhiteSpace(value) && value.ToLowerInvariant().Contains(query))
            {
                items.Add(item);
            }
        }

        FilteredSuggestions.Clear();
        foreach (var item in items)
            FilteredSuggestions.Add(item);

        SuggestionsView.IsVisible = FilteredSuggestions.Any();
    }
}












